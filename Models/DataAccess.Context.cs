//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlightMode.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FMDataAccess : DbContext
    {
        public FMDataAccess()
            : base("name=FMDataAccess")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<EduDetail> EduDetails { get; set; }
        public virtual DbSet<ExpDeatil> ExpDeatils { get; set; }
        public virtual DbSet<HealthParameter> HealthParameters { get; set; }
        public virtual DbSet<HealthReport> HealthReports { get; set; }
        public virtual DbSet<PhysicianDetail> PhysicianDetails { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Speciality> Specialities { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
    
        public virtual ObjectResult<string> RoleName(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RoleName", emailParameter);
        }
    
        public virtual ObjectResult<string> UserId(string uName)
        {
            var uNameParameter = uName != null ?
                new ObjectParameter("UName", uName) :
                new ObjectParameter("UName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserId", uNameParameter);
        }
    
        public virtual ObjectResult<string> SPNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPNames");
        }
    }
}
